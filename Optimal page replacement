/* Optimal page replacement algorithm gives the best performance with less no. of page faults.However it is difficult to implement it ,because future knowledge of the reference string is required. */

void main()
{
 int pos,c,m,maxi,n,i,k,nf,count,j=0,pf=0,np=0;
 printf("enter no. of pages");
 scanf("%d",&np);
 int s[np];
 printf("Enter pages sequence :\n");
 for(i=0;i<np;i++)
  scanf("%d",&s[i]);
 printf("enter the no. of frames");
 scanf("%d",&nf);
 int q[7],q1[7];
 for(i=0;i<nf;i++)
  q[i]=-1;
 for(i=0;i<np;i++)
 {maxi=0;
 for(m=0;m<nf;m++)
  q1[m]=-1;
  c=0;
  for(k=0;k<nf;k++)
   if(s[i]==q[k])
    c++;
  if(c==0)
  {
   if(q[nf-1]==-1)
   {
    q[j]=s[i];
    pf++;
    j++;
	for(k=0;k<nf;k++)
	printf("%d\t",q[k]);
	printf("-> %d\n",pf);
   }
   else {
    for(j=0;j<nf;j++){
	 for(m=i+1,count=0;m<np;m++,count++)
	  if(q[j]==s[m] &&  q1[j]==-1) 
	   q1[j]=count;
	  if(q1[j]==-1){
	  for(m=0;m<i;m++,count++)
         if(q[j]==s[m] && q1[j]==-1)
	    q1[j]=count;
	 }
	}
	for(n=0;n<nf;n++)
	 if(q1[n]>maxi){
	  maxi=q1[n];
	  pos=n;}
   	 q[pos]=s[i];pf++;
	for(n=0;n<nf;n++)
	 printf("%d ",q[n]);
	printf("-> %d\n",pf);
	
	
	}
       }
     }printf("the total no. of page faults are: %d",pf);
    
}
